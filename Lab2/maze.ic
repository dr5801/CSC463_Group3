/**
 * Authors: Drew Rife, Brett Pare, Michael Pulliam
 * Professor: Dr. Girard
 * CSC 463
 * Lab 2: Use two touch sensors to navigate out of a maze
*/

#define RIGHT_MOTOR 1
#define LEFT_MOTOR 0
#define RIGHT_SENSOR 15
#define LEFT_SENSOR 10
#define LEFT_DIRECTION 0
#define RIGHT_DIRECTION 1

struct Direction {
    int forward;
    int right;
    int left;
    int backward;
} direction = {0, 1, 2, 3};

int hitWall;
int currentState = direction.forward;

void turn(int turnDirection)
{
    float initialTime;
    float elapsedTime;
    initialTime = seconds();
    while(((initialTime+2.05) > elapsedTime)) {
        switch(turnDirection)
          {
            case direction.right:
              bk(RIGHT_MOTOR);
              fd(LEFT_MOTOR);
              break;
            case direction.left:
              bk(LEFT_MOTOR);
              fd(RIGHT_MOTOR);
              break;
        }
        elapsedTime = seconds();
    }
}

/* moves the robot forward */
float moveForward()
{
    float timeElapsed = 0.0;
    float secondsToRun = 5.0;
    float initialTime = seconds();
    float timeOut = initialTime + secondsToRun;
    
    hitWall = 0;
    while( (timeOut > seconds()) && !hitWall ) {
        motor(LEFT_MOTOR, 40);
        motor(RIGHT_MOTOR, 40);
        
        if( digital(LEFT_SENSOR) || digital(RIGHT_SENSOR) ) {
            hitWall = 1;
        } 
    }
    timeElapsed = seconds() - initialTime;
    
    if( hitWall ) {
        if( digital(LEFT_SENSOR) ) {
            waitForOtherSensor(RIGHT_SENSOR);
        }
        else {
            waitForOtherSensor(LEFT_SENSOR);
        }
        
        moveBackward(3.0);
    }   
    
    return timeElapsed;
}

/* moves the robot forward */
void moveBackward(float timeToRun)
{
    float initialTime;
    float timeElapsed;
    
    initialTime = seconds();
    while(initialTime+timeToRun > timeElapsed) {
        motor(LEFT_MOTOR, -40);
        motor(RIGHT_MOTOR, -40);
        timeElapsed = seconds();
    }
    
}

void waitForOtherSensor(int sensor) 
{
    if( sensor == RIGHT_SENSOR ) {
        off(LEFT_MOTOR);
        motor(RIGHT_MOTOR, 50);
    }
    else {
        off(RIGHT_MOTOR);
        motor(LEFT_MOTOR, 50);
    }
    
    while( !digital(sensor) );
}

/**
 * main method to run the robot 
 */
void main() 
{   
    float initialTime;
    float elapsedTime;
    int lastTurn = direction.forward;
    /* waits for start button to be pressed */
    while( !start_button() );
    
    while( !stop_button() ) {
        switch(currentState)
          {
            case direction.forward:
              moveForward();
              if(hitWall )
                currentState = direction.right;
              break;
            case direction.right:
              turn(direction.right);
              elapsedTime = moveForward();
              if(hitWall)
              {
                moveBackward(elapsedTime);
                currentState = direction.left;
              } else
              currentState = direction.forward;
              break;
            case direction.left:
              turn(direction.right);
              turn(direction.right);
              elapsedTime = moveForward();
              if(hitWall)
              {
                moveBackward(elapsedTime);
                currentState = direction.backward;
              }else
              currentState = direction.forward;
              break;
            case direction.backward:
              turn(direction.left);
              moveForward();
              currentState = direction.forward;
              break;
        }
    }
}
