#define RIGHT_MOTOR 2
#define LEFT_MOTOR 0
#define DEFAULT_SPEED 50
#define RIGHT 1
#define LEFT 0

int rightMotorSpeed = DEFAULT_SPEED;
int leftMotorSpeed = DEFAULT_SPEED;
int lastTurn = 0;

/* returns the initial average of light input before starting */
int getInitialAverage()
{    
    int i;
    int average = 0;
    for( i = 0; i < 10; i++ ) {
        average += analog(6);
    }
    
    return (average/=10);
}

/* Checks the sensor readings and turn if need be */
void checkSensorReading(int average)
{
    int currentReading = analog(6);
    float luminousThreashold = 0.30;
    int significantDifference = ((float)(average - currentReading) > ((float)average * luminousThreashold));
      
    /* if the difference is greater than 20% try turning */
    if(significantDifference) {
        
        alloff();
        
        /* check last turn and turn the opposite direction */
        if(lastTurn == LEFT) {
            //turnRight();
            turn(RIGHT);
            lastTurn = RIGHT;
            resetPosition(RIGHT);
            /* if after turning the reading is worse, undo the turn */
            if( analog(6) < currentReading ) {
                turn(LEFT);
                //turnLeft();
            }            
        }
        else {
            //turnLeft();
            
            lastTurn = LEFT;
            resetPosition(LEFT);
            /* if after turning the reading is worse, undo the turn */
            if( analog(6) < currentReading ) {
                turn(RIGHT);
                //turnRight();
            }
        }
    }
    
    
}

void resetPosition(int direction)
{
    int initialTime = (int)seconds();
    int elapsedTime;
    
    if( direction == RIGHT ) {
        motor(RIGHT_MOTOR, 50);
        motor(LEFT_MOTOR, 0);
    }
    else {
        motor(RIGHT_MOTOR, 0);
        motor(LEFT_MOTOR, 50);
    }
    
    while((initialTime + 1) != elapsedTime) {
        elapsedTime = (int)seconds();
    }
}

void turn(int direction)
{
    int initialTime = (int)seconds();
    int elapsedTime;
    
    if( direction == RIGHT ) {
        motor(RIGHT_MOTOR, -50);
        motor(LEFT_MOTOR, 0);
    }
    else {
        motor(RIGHT_MOTOR, 0);
        motor(LEFT_MOTOR, -50);
    }
    
    while((initialTime + 1) != elapsedTime) {
        elapsedTime = (int)seconds();
    }
}

void turnRight() 
{
    int intialTime = (int)seconds();
    int elapsedTime;
    
    motor(RIGHT_MOTOR, -50);
    motor(LEFT_MOTOR, 0);
    while((intialTime + 1) != elapsedTime) {
        elapsedTime = (int)seconds();
    }
    
    alloff();
}

void turnLeft()
{
    int initialTime = (int)seconds();
    int elapsedTime;
    
    motor(RIGHT_MOTOR, 0);
    motor(LEFT_MOTOR, -50);
    while((initialTime + 1) != elapsedTime) {
        elapsedTime = (int)seconds();
    }
    
    alloff();
}

/* moves the robot */
void move()
{
    motor(LEFT_MOTOR, 50);
    motor(RIGHT_MOTOR, 50);
}

void main() 
{   
    int average;
    /* Starting prompt for user */
    printf("Put robot on tape. ");
    printf("Press start.\n"); 
    
    /* waits for start button to be pressed */
    while(start_button() == 0);
    
    average = getInitialAverage();
    printf("Average: %d\n", average);
    
    
    while(1) {
        move();
        checkSensorReading(average);
    }
}
