/**
 * Authors: Drew Rife, Brett Pare, Michael Pulliam
 * Professor: Dr. Girard
 * CSC 463
 * Final Project
 */

#define RIGHT_MOTOR 2
#define LEFT_MOTOR 0
#define GRAB_MOTOR 1
#define LEFT_IR 4 //NEED TO UPDATE THIS
#define RIGHT_IR 5 //NEED TO UPDATE THIS
#define FRONT_IR 7 //NEED TO UPDATE THIS
#define UPHILL 0
#define DOWNHILL 1
#define LEFT 0
#define RIGHT 1
#define TRUE 1
#define FALSE 0

///////////////////////////////////////////
#define DEFAULT_MOTOR_SPEED 80.0
#define MOTOR_RATIO 2.0

float sensorValues[2];
float motorSpeeds[2];
float difference;
float differencePercentage;
float fuzzy;
///////////////////////////////////////////

int transporting = FALSE;
int obtaining = FALSE; //current going to get a block
int gathered = FALSE; //true when obtained a block
int directionOfTravel = UPHILL;
int sideChosen = LEFT;

/**
 * Turns the robot in the specific direction for a brief time while ignoring downward IR sensors, but stops when it hits a line again
 * TL;DR switches from one line to another in the specified direction
 */
void turn(int turnDirection)
{
    float initialTime = seconds();
    float timeElapsed;
    switch(turnDirection)
    {
        case LEFT:
        bk(RIGHT_MOTOR);
        fd(LEFT_MOTOR);
        break;
        case RIGHT:
        bk(LEFT_MOTOR);
        fd(RIGHT_MOTOR);
        break;
    }
    while((initialTime + 1.0) > seconds()); //Get off the line
    
    /*
     * Keep turning until we find another line
     */
    while(analog(!turnDirection) > 100)
    {
        if(turnDirection == LEFT)
        {
            bk(RIGHT_MOTOR);
            fd(LEFT_MOTOR);
        }
        else
        {
            bk(LEFT_MOTOR);
            fd(RIGHT_MOTOR);
        }
    }
    
    alloff();
}

/**
 * Calculate the absolute value of an input floating point value
 */
float abs(float input)
{
    if(input < 0.0)
    {
      return input * (-1.0);
    }    
    else
    {
        return input;
    }
}

/**
 * Obtain values from the light sensors and save the values in an array 
 */
void getSensorValues()
{
    sensorValues[0] = (float)analog(LEFT_IR);
    sensorValues[1] = (float)analog(RIGHT_IR);
}

/**
 * Find the difference between the sensor values
 */
void calculateDifference()
{
    float max_sensor_reading = 255.0;
    difference = sensorValues[0]-sensorValues[1];
    differencePercentage = abs(difference) / max_sensor_reading;
    
    /* generate a fuzzy value */
    fuzzy = 1.0 - (abs(difference)/255.0) * MOTOR_RATIO;
}

/**
 * Calculate the resulting motor values
 */
void calculateMotorSpeeds()
{
    if(difference < 0.0) 
    {
        /* if the left sensor is reading a higher value than the right, calculate the speed for the left motor */
        motorSpeeds[LEFT] = DEFAULT_MOTOR_SPEED;
        motorSpeeds[RIGHT] = DEFAULT_MOTOR_SPEED * fuzzy;
    }
    else if(difference > 0.0)
    {
        /* if the left sensor is reading a lower value than the right, calculate the speed for the right motor */
        motorSpeeds[RIGHT] = DEFAULT_MOTOR_SPEED;
        motorSpeeds[LEFT] = DEFAULT_MOTOR_SPEED * fuzzy;
    }
    else
    {
        /* on the black line, keep going straight */
        motorSpeeds[LEFT] = DEFAULT_MOTOR_SPEED;
        motorSpeeds[RIGHT] = DEFAULT_MOTOR_SPEED;
    }
}

/**
 * Moves the robot forward until the front IR sensor detects an object (block)
 */
void moveForward()
{
    getSensorValues();
    calculateDifference();
    calculateMotorSpeeds();
    
    motor(LEFT_MOTOR,(int)motorSpeeds[0]);
    motor(RIGHT_MOTOR,(int)motorSpeeds[1]);
}

/*
 * Checks both downward facing IR sensors, and if they both report a large value, that means we are at an intersection
 */
int checkIntersection()
{
    return (analog(LEFT_IR) > 150 && analog(RIGHT_IR) > 150);
}

/**
 * main method to run the robot 
 */
int main() 
{   
    while(1)
    {
        moveForward();
    }
}
